{"version":3,"sources":["CharacterCard.js","Wrapper.js","Navbar.js","Jumbotron.js","App.js","reportWebVitals.js","index.js"],"names":["CharacterCard","props","className","Clicked","onClick","handleClick","id","alt","name","src","image","occupation","Wrapper","children","Navbar","currentScore","highScore","Jumbotron","App","state","characters","shuffleArray","handleScore","console","log","timesClicked","forEach","element","clicked","setState","handleIncrement","shuffledArr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b048175.chunk.js","sourcesContent":["import React from \"react\";\n \nfunction CharacterCard(props) {\n    return (\n        <div className={\"card \" + (props.Clicked ? \"animate\" : \"\")} onClick={() => props.handleClick( props.id)} >  \n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n            <div className=\"img-content\">\n                <ul>\n                    <li>\n                        <strong>Name:</strong>{props.name}\n                    </li>\n                    <li>\n                        <strong>Occupation: </strong>{props.occupation}\n                    </li>\n                </ul>\n            </div>\n        </div >\n    )\n}\n \nexport default CharacterCard;","import React from \"react\";\n \nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n \nexport default Wrapper;","import React from \"react\";\n \nfunction Navbar(props) {\n    return (\n        <header className=\"container-fluid fixed-top\" >\n            <div className=\"row\">\n                <h1 className=\"col-sm-8\">Celebrity Memory Game</h1>\n                <nav className=\"col-sm-4\">\n                    <p>Score: <span>{props.currentScore}</span></p>\n                    <p>Top Score: <span>{props.highScore}</span> </p>\n                    {props.children}\n                </nav>\n            </div>\n        </header>        \n    )\n}\n \nexport default Navbar;","import React from \"react\";\n \nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">{props.children}\n        <p className=\"lead\">Get points by clicking on an image but don't click on any more than once!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highScore) {\n          this.setState({ highScore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.characters.forEach(element => (element.clicked = false));\n        console.log(this.state.characters);\n      }\n    });\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharacterCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            occupation={character.occupation}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}